const router = require('express').Router();
const { Employee, Transaction, Category, Item } = require('../../models');
// Import sequelize operators. Not operator used in /inventory-history route to get not null return date
const { Op } = require("sequelize");


router.post('/login', async (req, res) => {
  try {
    console.log('*****************LOGIN ROUTE ***************************');
    const employeeData = await Employee.findOne({
      where: { email: req.body.email },
    });

    if (!employeeData) {
      res.status(400).json({
        message: 'Incorrect email or password or role, please try again',
      });
      return;
    }

    const validPassword = await employeeData.checkPassword(req.body.password);

    if (!validPassword) {
      res.status(400).json({
        message: 'Incorrect email or password or role, please try again',
      });
      return;
    }

    let validRole = true;
    const isRoleAdmin = req.body.isAdmin === 'true';

    const emp = employeeData.get({ plain: true });

    if (emp.is_admin != isRoleAdmin) {
      validRole = false;
    }

    if (!validRole) {
      res.status(400).json({
        message: 'Incorrect email or password or role, please try again',
      });
      return;
    }

    req.session.user_id = employeeData.id;
    req.session.is_admin = employeeData.is_admin;
    req.session.logged_in = true;

    res.json({ employee: employeeData, message: 'You are now logged in!' });
  } catch (err) {
    res.status(400).json(err);
  }
});

router.post('/signup', async (req, res) => {
  try {
    // All the fields you can create and the data attached to the request body.
    //firstname, lastname, email, password, isAdmin

    let isAdmin = req.body.isAdmin === 'true';

    const employeeData = await Employee.create({
      first_name: req.body.firstname,
      last_name: req.body.lastname,
      email: req.body.email,
      password: req.body.password,
      is_admin: isAdmin,
    });

    req.session.user_id = employeeData.id;
    req.session.is_admin = employeeData.is_admin;
    req.session.logged_in = true;

    res
      .status(200)
      .json({ employee: employeeData, message: 'You are now logged in!' });
  } catch (err) {
    res.status(400).json(err);
  }
});

router.get('/', async (req, res) => {
  console.log('EMPLOYEE DASHBORD REQUEST');
  try {
    const employeeTransactions = await Transaction.findAll({
      where: {
        employee_id: req.session.user_id,
      },
      include: [{ model: Employee }, { model: Item }],
    });

    // Serialize user data so templates can read it
    const employeeTransactionData = employeeTransactions.map((transaction) =>
      transaction.get({ plain: true })
    );

    res.render('employee-dashboard', {
      employeeTransactionData: employeeTransactionData,
      logged_in: req.session.logged_in,
    });
  } catch (err) {
    res.status(500).json(err);
  }
});

router.get('/current-inventory', async (req, res) => {
  try {
    const currentItems = await Transaction.findAll({
      // Get transactions for relevant employee.
      // Get's currently borrowed inventory only by ignoring transactions with a return date.
       where: {
         employee_id: req.session.user_id,
         return_date: null,
       },
       // Nested eager loading Item and Category tables to get all item data including category.
       include: {
        model: Item,
        include: [Category],
      },
       raw: true,
    })
    // Return users currently borrowed inventory.
    res.json(currentItems);
  } catch (err) {
    // If try fails, return error.
    res.sendStatus(400).json(err);
  }
});

router.get('/inventory-history', async (req, res) => {
  try {
    const previousItems = await Transaction.findAll({
      // Get transactions for relevant employee.
      // Get's previously borrowed items only by only reteiving transactions with a return date.
       where: {
         employee_id: req.session.user_id,
         // Utilises sequelize not operator to get transactions with a return date.
         [Op.not]: {return_date: null}
       },
       // Nested eager loading Item and Category tables to get all item data including category.
       include: {
        model: Item,
        include: [Category],
      },
       raw: true,
    })
    // Return all data in current items.
    res.json(previousItems);
  } catch (err) {
    // If try fails, return error.
    res.sendStatus(400).json(err);
  }
});



router.post('/borrow', async (req, res) => {

  try {
    // Get employee id and item id to update transaction table
    const transactionData = {
      employee_id: req.session.user_id,
      item_id: req.body.item_id
    }

    // Create variable to mark itema s not available
    const itemAvailable = {
      available: false
    };

    // Update relevant item to not available
    await Item.update(itemAvailable, {
      where: {
        id: req.body.item_id,
      },
    })

    // Inesrt new transaction into transaction table.
    // Only need employee id and item id as borrow date is current timesatamp and return date is null.
    await Transaction.create(transactionData);

    res.sendStatus(200);

  } catch (err) {
    res.status(400).json({
      success: false
    })
  }
})

module.exports = router;
